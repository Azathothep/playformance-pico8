pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
--[[

this is a pico8 program designed
for a playformance i originally
gave in lyon in 2024 (more info
on www.felix-belthoise.com)

instructions :
-> left mouse button =
								add an electron
-> right mouse button =
								add a proton
-> middle mouse button =
								add a muon

-> when an electron and a proton
are fusing, they create a
neutron

-> when a muon collides with a
neutron, it breaks back into an
electron and a proton

-> use x to clear the screen and
reset the cartridge memory

----

the idea was to make a simple
particle simulation system
inspired by elementary
particles interactions:
protons and electrons
attracting and repulsing each
other (as defined by coulomb's
law), particles fusion
and fission.

i chose to use pico8 because of
its simple design (this is
supposed to be projected to a
large public, so you don't want
to have a 20-windows software
that would be difficult to
understand for non-programers),
and show that even a very
limited engine such as this one
can still create beautiful
evolving systems on screen.

the main challenge was, well,
those limitations.

pico8 has only 64kb of ram,
and keeping track of multiple
moving particles influencing
each other quickly impacted
performances.

at first, with a non-optimized
system, i couldn't render more
than 30 particles without the
program heavily slowing down.
after some rework, it can now
render up to 500.

to accelerate execution, i
decided to go for a structure-
of-arrays data layout and reduce
lots of unnecessary divisions. i
also used approximations
for some calculations
(for example, instead
of checking the exact distance
between two particles, i only
check the difference between
their coordinates).

don't hesitate to take a look at
the code!

]]--
-->8
--game loop

function _init()
 init_particles()
 mouse.init()
end

--main update function, called each frame
function _update()
 interventions_divines() --check player inputs
 apply_offset()
 apply_constitution() --applies a set of updating functions
 clean_dead()
 normalize_deltas()
 apply_delta()
end

debug=""

--main draw function, called each frame after _update
function _draw()
 cls()
 draw_particles()
 draw_mouse()
 
 print(debug)
end
-->8
--tables
--storing components

pos={} --stores particles position
col={} --stores particles color
dlt={} --stores particles delta
--(== their movement directions)

chg={} --stores particles charges
vts={} --stores particles speed
typ={} --stores particles type (electron, proton...) 
liv={} --stores live state

--colors

bleu=12
rouge=8
vert=11
white=7
blanc=7
beige=15
jaune=10
rose=14
marron=4
orange=9
gris=6

--charges

positif=1
negatif=-1
neutre=0
-->8
--lois

------------------------coulomb

k=40 --coulomb's law force
coulomb_max_range=100
coulomb_min_range=10
range_coulomb=coulomb_max_range

function loi_coulomb(i1, i2)
 local dif=soustraie(pos[i2], pos[i1])
 
 --this check avoid applying the
 --coulomb law to particles too
 --far away from each other.
 --the max distance, range_coulomb,
 --is evolving depending on the
 --number of alive particles:
 --the more they are, the closer
 --they need to be to apply the
 --law.
	--this is to avoid the number
	--of calculations growing
	--exponentially each time a
	--new particle is created.
 
 --i make a square-shaped
 --distance check, not circle.
 --this is an acceptable 
 --proximation to avoid
 --multiplying divisions.
 if (dif.x<-range_coulomb or dif.x>range_coulomb) return
 if (dif.y<-range_coulomb or dif.y>range_coulomb) return
 
 local r=magnitude(dif)

	local q1=chg[i1]
	local q2=chg[i2]
 
 --this is actually coulomb's law
	f=k*(q1*q2/(r*r))
 
 --i bound the resulting force
 --so the particles aren't ejected
 --into the infinity of space
 --if they are really close.
	local f2=mid(-0.75, f, 0.75)
	
	local m_dlt=multiplie(dif, f2/r)
 
 --modifying the particles delta
 dlt[i1]=soustraie(dlt[i1], m_dlt)
 dlt[i2]=additionne(dlt[i2], m_dlt)
end

function init_coulomb(t, i)
 if (t.charge==positif or t.charge==negatif) add(clb, i)
 	
 return false
end

--applying the coulomb's law
--to every charged particles
function article_coulomb()
 for i1=1,#clb do
  for i2=i1+1,#clb do
   loi_coulomb(clb[i1], clb[i2])
  end
 end
end

-------------------------fusion

range_fusion=1

function init_fusion(t, i)
 if (t.nom=="electron") then add(elc, i) 
 elseif (t.nom=="proton") then add(prt, i)
 end
end

--if two of the specified particles
--are colliding, then destroy them
--and create a third one
function loi_fusion(i1, i2, p)
  creation_particule(p, pos[i1].x, pos[i1].y)
  detruit_particule(i1)
  detruit_particule(i2)
end

function article_fusion()
 for e in all(elc) do
  for p in all(prt) do
   if (collision(e, p, 1)) loi_fusion(e, p, neutron)
  end
 end
end

------------------------fission

range_fission=4
force_fission=10

function init_fission(t, i)
 if (ontologies[3] and t.nom==ontologies[3].nom) then add(neu, i) 
 elseif (ontologies[4] and t.nom==ontologies[4].nom) then add(mun, i)
 end
end

function projection_particules(p1, p2, posp, dir, force)
 local i1=creation_particule(p1, posp.x+dir.x*force, posp.y+dir.y*force)
 local i2=creation_particule(p2, posp.x-dir.x*force, posp.y-dir.y*force)
 dlt[i1]={x=dir.x, y=dir.y}
 dlt[i2]={x=-dir.x, y=-dir.y}
end

--if the two particles specified
--are collising, destroy the second
--one and create 2 new particles
--instead
function loi_fission(i1, i2, p1, p2)
  detruit_particule(i2)
  
  local dir=direction_aleatoire()
 
  projection_particules(p1, p2, pos[i1], dir, 10)
end

function article_fission()
 for i in all(mun) do
  for j in all(neu) do
 			if (collision(i, j, 4)) loi_fission(i, j, electron, proton)
  end
 end
end
-->8
--constitution

--laws currently applying
--(basically, functions that are
--called each frame)
constitution={
	article_coulomb,
	article_fusion,
	article_fission,
}

clb={} --particles affected by
--coulomb's law (== charged
--particles)

elc={}
prt={}

neu={}
mun={}

initialisation={
 init_coulomb,
 init_fusion,
 init_fission
}

function apply_constitution()
	for rule in all(constitution) do
	 rule()
	end
end
-->8
--player input

function creation_electron(x, y)
 creation_particule(electron, x, y)
end

function creation_proton(x, y)
 creation_particule(proton, x, y)
end

function creation_muon(x, y)
 creation_particule(muon, x, y)
end

--lf=left mouse button
--rf=right mouse button
--mf=middle mouse button
baguette_magique={
 lf=creation_electron,
 rf=creation_proton,
 mf=creation_muon
}

function interventions_divines()
 btnp_fn(⬇️, function() apparition(electron) end)
 btnp_fn(⬆️, function() apparition(proton) end)
 btnp_fn(⬅️, function() apparition(ontologies[4]) end)
 btnp_fn(❎, clean_all)
 btnp_fn(4, switch_mouse_mode)
 update_mouse()
end

function btnp_fn(b, f)
 if (btnp(b)) f()
end

function apparition(t)
 creation_particule_rnd(t)
end

mouse_eraser_radius=7
mouse_eraser_border=15

function update_mouse()
  local mouse_x,mouse_y = mouse.pos()
  local mouse_btn = mouse.button()
  
  if mouse_continuous==true or mouse.was_pressed==false then
	  if baguette_magique.lf!=nil and mouse_btn==1 then 
	  	baguette_magique.lf(mouse_x, mouse_y)
	  elseif baguette_magique.mf!=nil and mouse_btn==4 then
	   baguette_magique.mf(mouse_x, mouse_y)
	  elseif baguette_magique.rf!=nil and mouse_btn==2 then
	   baguette_magique.rf(mouse_x, mouse_y)
	  end
  end
  
  mouse.was_pressed=mouse_btn!=0
end

function switch_mouse_mode()
 mouse_continuous= not mouse_continuous
end

function draw_mouse()
	local mouse_x,mouse_y = mouse.pos()
	local mouse_btn = mouse.button()
	
	if (mouse_btn==4 and mouse_continuous and trou_noir) then circ(mouse_x, mouse_y, mouse_eraser_radius-1, mouse_eraser_color)
 else
		pset(mouse_x, mouse_y, mouse_color)
		pset(mouse_x+1, mouse_y, mouse_color)
		pset(mouse_x, mouse_y+1, mouse_color)
 end
end

mouse_color=7
mouse_eraser_color=1
mouse_continuous=false

mouse = {
  init = function()
    poke(0x5f2d, 1)
  end,
  -- return int:x, int:y, onscreen:bool
  pos = function()
    local x,y = stat(32)-1,stat(33)-1
    return stat(32)-1,stat(33)-1
  end,
  -- return int:button [0..4]
  -- 0 .. no button
  -- 1 .. left
  -- 2 .. right
  -- 4 .. middle
  was_pressed=false,
  button = function()
    	return stat(34)
  end,
}

-->8
--particules

--particles definition
electron={
 nom="electron",
 color=bleu,
 charge=negatif,
 vitesse=30
}

proton={
 nom="proton",
 color=rouge,
 charge=positif,
 vitesse=30
}

neutron={
 nom="neutron",
 color=vert,
 charge=neutre,
 vitesse=30
}

muon={
 nom="muon",
 color=jaune,
 charge=neutre,
 vitesse=30
}

--list of particle types
ontologies={
 electron,
 proton,
 neutron,
 muon
}
-->8
--particle logic

function init_particles()
 --recreate the particles
 --stored in cartridge data
 --last time the program was
 --run
 init_cartdata()
end

function normalize_deltas()
 for i=1,#dlt do
  dlt[i]=normalize(dlt[i])
 end
end

--apply particles movement
--(their current direction
--are stored in the "dlt" table)
function apply_delta()
 for i=1,#pos do
  pos[i].x+=dlt[i].x*vts[i]
  pos[i].y+=dlt[i].y*vts[i]
 end
end

--move particles to the other
--side of the screen if they
--went outside of it
function apply_offset()
 for i=1,#pos do
  if (pos[i].x>127) then pos[i].x-=128
  elseif (pos[i].x<0) then pos[i].x+=128
  end
  
  if (pos[i].y>127) then pos[i].y-=128
  elseif (pos[i].y<0) then pos[i].y+=128
 	end
 end
end

function draw_particles()
 for i=1,#pos do
  circfill(pos[i].x, pos[i].y, 1, col[i])
 end
end

function init_cartdata()
 cartdata("play_test_1")
 
 local m=#ontologies
 for i=1,m do
  local n=dget(i-1)
  dset(i-1, 0)
  local t=ontologies[i]
  for j=1,n do
   creation_particule_rnd(t)
  end
 end
end

--check the given particles are
--colliding (collision bounds
--are square-shaped rather than
--circle-shaped to avoid
--divisions)
function collision(i1, i2, d) 
 local dif=soustraie(pos[i2], pos[i1])
  
 return ((liv[i1] and liv[i2])
 							and (dif.x>-d and dif.x<d
 							and dif.y>-d and dif.y<d))
end
-->8
--creation and deletion

charged_limit=55 --max number of charged particles allowed
neutral_limit=750 --max number of neutral particles allowed

neutral={} --table storing indices of only neutral charged particles
charged={} --table storing indices of only charged particles

function creation_particule(t, x, y)
	local theta=rnd(1)
	local dx, dy=cos(theta), sin(theta)
 
 --destroy a particle of the
 --same charge if we already reached
 --the max particles number
 detruit_particule_charge(t.charge)
 
 local idx=alloue_particule(t, x, y, dx, dy) 
 
 return idx
end

function creation_particule_rnd(t)
 local x, y=rnd(127), rnd(127)
 return creation_particule(t, x, y)
end

function creation_multiple(t, n)
 for i=1,n do
  creation_particule_rnd(t)
 end
end

--create a new particle,
--either by recycling a dead one
--or by adding new entries in
--the component tables
function alloue_particule(t, x, y, dx, dy)
 local l=get_dead(t)
 if (l>0) then
  pos[l]={x=x, y=y}
  dlt[l]={x=dx, y=dy}
  liv[l]=true
  return l
 end
 
 add(pos, {x=x, y=y})
 add(dlt, {x=dx, y=dy})
 add(col, t.color)
 add(chg, t.charge)
 add(vts, t.vitesse/20)
 add(typ, t.nom)
 add(liv, true)
 
 add(trs, #pos)
 
 if (t.charge==0) then add(neutral, #pos)
 else add(charged, #pos) end
 
 for i=1,#initialisation do
  initialisation[i](t, #pos)
 end
 
 --range_coulomb represents the
 --max distance to check for
 --coulomb's law. in short,
 --the more particles we have,
 --the closer they need to be to
 --influence each other.
 --this is to avoid
 --exponentially increasing the
 --number of calculations
 --performed by coulomb's law
 --for each new particle added.
 range_coulomb=mid(coulomb_min_range, range_coulomb-1, coulomb_max_range)

 --storing the particle in
 --cartridge data so they are
 --back when we run the program
 --next time
	add_memory(t.nom)
	
	return #pos
end

function get_dead(t)
 for i=1,#liv do
  if (liv[i]==false and typ[i]==t.nom) return i
 end
 
 return 0
end

function detruit_particule(i)
 liv[i]=false
end

function detruit_particule_charge(c)
 if (c==0 and #neutral>=neutral_limit) then detruit_particule(get_rnd(neutral))
 elseif (#charged>=charged_limit) then detruit_particule(get_rnd(charged)) end
end

function get_rnd(t)
 return t[flr(1+rnd(#t-1))]
end

function destroy_memory(i)
 rm_memory(typ[i])
	
	deli(pos, i)
 deli(dlt, i)
 deli(col, i)
 deli(chg, i)
 deli(vts, i)
 deli(typ, i)
 deli(liv, i)
 
 rm_index(clb, i)
 rm_index(elc, i)
 rm_index(prt, i)
 rm_index(mun, i)
 rm_index(neu, i)
 rm_index(charged, i)
 rm_index(neutral, i)
 
 range_coulomb=mid(coulomb_min_range, range_coulomb+1, coulomb_max_range)
end

function clean_all()
 pos={}
 dlt={}
 col={}
 chg={}
 vts={}
 typ={}
 liv={}
 
 clb={}
 elc={}
 prt={}
 mun={}
 neu={}
 
 reset_memory()
end

function clean_dead()
 for i=#liv,1,-1 do
  if (liv[i]==false) destroy_memory(i)
 end
end

function rm_index(t, idx)
 del(t, idx)
 
 for i=1,#t do
  if (t[i]>idx) t[i]-=1
 end
end

function destruction(x, y, r, b)
 for i=1,#pos do
	 local rel=soustraie({x=x, y=y}, pos[i])
	 rela={x=abs(rel.x), y=abs(rel.y)}
	 if (rela.x<=r+b and rela.y<=r+b) then
	  if (rela.x<=r and rela.y<=r) then
	 				detruit_particule(i)
	 	else
	 			 dlt[i]=rel
	 	end
	 end
	end
end

function gerbe(t, x, y, n)
 explosion(t, x, y, n)
end

function explosion(t, x, y, n)
 local slice=1/n
 local theta=rnd(slice)
 
 for i=0, n do
  local idx=creation_particule(t, x, y)
  dlt[idx]=dir_vector(theta)
  theta+=slice
 end
end

function direction_aleatoire()
 return dir_vector(rnd(1))
end

function dir_vector(theta)
 return {x=sin(theta), y=cos(theta)}
end

function add_memory(nom)
 local id=get_part_id(nom)
 
 if (id==-1) return
 
 nb=dget(id-1)
 
 dset(id-1, nb+1)
end

function rm_memory(nom)
 id=get_part_id(nom)
 
 if (id==-1) return
 
 nb=dget(id-1)
 
 dset(id-1, nb-1)
end

function reset_memory()
 for i=1,#ontologies do
  dset(i-1, 0)
 end
end

function get_part_id(nom)
 for i=1,#ontologies do
  if (nom==ontologies[i].nom) return i
 end
 
 return -1
end
-->8
--utils

lmp=electron

function additionne(v1, v2)
 return {x=v1.x+v2.x, y=v1.y+v2.y}
end

function soustraie(v1, v2)
 return {x=v1.x-v2.x, y=v1.y-v2.y}
end

function magnitude(v)
 return sqrt(sqr_magnitude(v))
end

function sqr_magnitude(v)
 return v.x^2+v.y^2
end

function multiplie(v, m)
 return {x=v.x*m, y=v.y*m}
end

function reverse(v)
 return {x=-v.x, y=-v.y}
end

function normalize(v)
 return multiplie(v, 1/magnitude(v))
end

function inverse(v)
 return {x=1/v.x, y=1/v.y}
end

function alea(n1, n2)
 return rnd(n2-n1)+n1
end

function valea(n1, n2)
 return {x=alea(n1, n2), y=alea(n1, n2)}
end

function copy(v)
 return {x=v.x, y=v.y}
end
__label__
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888eeeeee888eeeeee888eeeeee888eeeeee888eeeeee888eeeeee888777777888eeeeee888888888ff8ff8888228822888222822888888822888888228888
8888ee888ee88ee88eee88ee888ee88ee888ee88ee8e8ee88ee888ee88778777788ee888ee88888888ff888ff888222222888222822888882282888888222888
888eee8e8ee8eeee8eee8eeeee8ee8eeeee8ee8eee8e8ee8eee8eeee8777877778eeeee8ee88888888ff888ff888282282888222888888228882888888288888
888eee8e8ee8eeee8eee8eee888ee8eeee88ee8eee888ee8eee888ee8777888778eeeee8ee88e8e888ff888ff888222222888888222888228882888822288888
888eee8e8ee8eeee8eee8eee8eeee8eeeee8ee8eeeee8ee8eeeee8ee8777878778eeeee8ee88888888ff888ff888822228888228222888882282888222288888
888eee888ee8eee888ee8eee888ee8eee888ee8eeeee8ee8eee888ee8777888778eeeee8ee888888888ff8ff8888828828888228222888888822888222888888
888eeeeeeee8eeeeeeee8eeeeeeee8eeeeeeee8eeeeeeee8eeeeeeee8777777778eeeeeeee888888888888888888888888888888888888888888888888888888
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111eee1eee1111117116611666166611111616111711111666166616611166166611111166116616161611116616661666111111ee1eee1111166116661666
111111e11e11111117111616116116111111161611711111161616161616161116111111161116161616161116161666161611111e1e1e1e1111161611611611
111111e11ee1111117111616116116611111116117111777166116661616161116611111161116161616161116161616166111111e1e1ee11111161611611661
111111e11e11111117111616116116111111161611711111161616161616161616111111161116161616161116161616161611111e1e1e1e1111161611611611
11111eee1e11111111711666166616111171161611171111161616161616166616661666116616611166166616611616166611111ee11e1e1111166616661611
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111eee1eee1111117116611666166611111616111711111666166616611166166611111166116616161611116616661666111111ee1eee1111166116661666
111111e11e11111117111616116116111111161611711111161616161616161116111111161116161616161116161666161611111e1e1e1e1111161611611611
111111e11ee1111117111616116116611111166617111777166116661616161116611111161116161616161116161616166111111e1e1ee11111161611611661
111111e11e11111117111616116116111111111611711111161616161616161616111111161116161616161116161616161611111e1e1e1e1111161611611611
11111eee1e11111111711666166616111171166611171111161616161616166616661666116616611166166616611616166611111ee11e1e1111166616661611
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111e1111ee11ee1eee1e1111111666111116661666116616611666166616161661166611711661166616661171111111111111111111111111111111111111
11111e111e1e1e111e1e1e1111111616177716661616161116161161116116161616161117111616116116111117111111111111111111111111111111111111
11111e111e1e1e111eee1e1111111661111116161666161116161161116116161616166117111616116116611117111111111111111111111111111111111111
11111e111e1e1e111e1e1e1111111616177716161616161616161161116116161616161117111616116116111117111111111111111111111111111111111111
11111eee1ee111ee1e1e1eee11111616111116161616166616161666116111661666166611711666166616111171111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111e1111ee11ee1eee1e1111111161166111111166161611661771166616611177111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e111e1e1e1111111616116117771611161616111711116111611117111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e111eee1e1111111616116111111611166616111711116111611117111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e111e1e1e1111111661116117771611161616161711116111611117111111111111111111111111111111111111111111111111111111111111
11111eee1ee111ee1e1e1eee11111166166611111166161616661771166616661177111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111e1111ee11ee1eee1e1111111161166611111166161611661771166616661177111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e111e1e1e1111111616111617771611161616111711116111161117111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e111eee1e1111111616166611111611166616111711116116661117111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e111e1e1e1111111661161117771611161616161711116116111117111111111111111111111111111111111111111111111111111111111111
11111eee1ee111ee1e1e1eee11111166166611111166161616661771166616661177111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111666111116161717117111611661171711611666111711711666171716661171117111111111111111111111111111111111111111111111111111111111
11111611177716161171171116161161117116161116117117111616117116161117111711111111111111111111111111111111111111111111111111111111
11111661111116611777171116161161177716161666117117111661177716611117111711111111111111111111111111111111111111111111111111111111
11111611177716161171171111611161117116611611117117111616117116161117111711111111111111111111111111111111111111111111111111111111
11111611111116161717117117161666171711661666171111711616171716161171117111111111111111111111111111111111111111111111111111111111
11111111111111111111111117711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111117771111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111117777111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111117711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111171111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111e1111ee11ee1eee1e1111111666166611111bbb1bbb1bb1117111111ccc11111ccc1ccc111111111666111111111ccc11111ccc1ccc1171111111111111
11111e111e1e1e111e1e1e1111111611111617771bbb11b11b1b171111111c1c1111111c1c11111111111611111111111c1c1111111c1c111117111111111111
11111e111e1e1e111eee1e1111111661166611111b1b11b11b1b17111ccc1c1c1111111c1ccc111111111661111111111c1c1111111c1ccc1117111111111111
11111e111e1e1e111e1e1e1111111611161117771b1b11b11b1b171111111c1c1111111c111c117111111611117111111c1c1111111c111c1117111111111111
11111eee1ee111ee1e1e1eee11111611166611111b1b1bbb1bbb117111111ccc11c1111c1ccc171111111611171111111ccc11c1111c1ccc1171111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111e1111ee11ee1eee1e1111111666111116611611166611111666161616111666166616661611166616661171166116661666111111111666166611171666
11111e111e1e1e111e1e1e1111111666111116161611116117771666161616111161116116161611116116111711161611611611111111111611111611711616
11111e111e1e1e111eee1e1111111616111116161611116111111616161616111161116116661611116116611711161611611661111111111661166611711661
11111e111e1e1e111e1e1e1111111616111116161611116117771616161616111161116116111611116116111711161611611611117111111611161111711616
11111eee1ee111ee1e1e1eee11111616166616661666116111111616116616661161166616111666166616661171166616661611171111111611166617111616
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111661161116661771166616611177111111661166161611661666166616661666166611711661161116661771166616611177111111111666111116611611
11111616161111611711116111611117177716111616161616111161161616161161161117111616161111611711116111611117111111111666111116161611
11111616161111611711116111611117111116661616161616661161166116661161166117111616161111611711116111611117111111111616111116161611
11111616161111611711116111611117177711161616161611161161161616161161161117111616161111611711116111611117117111111616111116161611
11111666166611611771166616661177111116611661116616611161161616161666166611711666166611611771166616661177171111111616166616661666
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111661161116661771166616661177111116661661166116661666166611661661166116661171166116111666177116661666117711111111166611111661
11111616161111611711116111161117177716161616161611611161116116161616161616111711161616111161171111611116111711111111166611111616
11111616161111611711116116661117111116661616161611611161116116161616161616611711161616111161171111611666111711111111161611111616
11111616161111611711116116111117177716161616161611611161116116161616161616111711161616111161171111611611111711711111161611111616
11111666166611611771166616661177111116161666166616661161166616611616161616661171166616661161177116661666117717111111161616661666
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1eee1ee11ee111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1e111e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1ee11e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1e111e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1eee1e1e1eee11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1eee1e1e1ee111ee1eee1eee11ee1ee1111116661661166616661111116611661616161111661666166611711666111111111666117111111111111111111111
1e111e1e1e1e1e1111e111e11e1e1e1e111111611616116111611111161116161616161116161666161617111161111111111161111711111111111111111111
1ee11e1e1e1e1e1111e111e11e1e1e1e111111611616116111611111161116161616161116161616166117111161111111111161111711111111111111111111
1e111e1e1e1e1e1111e111e11e1e1e1e111111611616116111611111161116161616161116161616161617111161117111111161111711111111111111111111
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
82888222822882228888822282288882822282228288888888888888888888888888888888888888888882228228822882888882822282288222822288866688
82888828828282888888888288288828888282828288888888888888888888888888888888888888888888828828882882888828828288288282888288888888
82888828828282288888822288288828822282828222888888888888888888888888888888888888888882228828882882228828822288288222822288822288
82888828828282888888828888288828828882828282888888888888888888888888888888888888888882888828882882828828828288288882828888888888
82228222828282228888822282228288822282228222888888888888888888888888888888888888888882228222822282228288822282228882822288822288
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

